rownumber <- apply(apply(perms, 1,
function(x) (x == c(1, 1, 1, 1, 0, 0, 0, 0))),
2, sum)
rownumber <- (rownumber == 8)
observed_test <- test_statistic[rownumber == TRUE]
#*change information here for students
larger_than_observed <- (test_statistic >= observed_test)
sum(larger_than_observed)
df <- data.frame(perms,control_avg,treatment_avg,test_statistic)
library(perm)
rm(list = ls())
perms <- chooseMatrix(8,4)
A <- matrix(c(85, 99, 100, 76, 26, 45, 97, 72), nrow=8, ncol=1, byrow=TRUE)
treatment_avg <- (1/4)*perms%*%A
control_avg <- (1/4)*(1-perms)%*%A
test_statistic <- abs(treatment_avg-control_avg)
rownumber <- apply(apply(perms, 1,
function(x) (x == c(1, 1, 1, 1, 0, 0, 0, 0))),
2, sum)
rownumber <- (rownumber == 8)
observed_test <- test_statistic[rownumber == TRUE]
#*change information here for students
larger_than_observed <- (test_statistic >= observed_test)
sum(larger_than_observed)
df <- data.frame(perms,control_avg,treatment_avg,test_statistic)
View(A)
View(treatment_avg)
View(perms)
View(df)
sum(larger_than_observed)
rownumber
rownumber <- apply(apply(perms, 1,
function(x) (x == c(1, 1, 1, 1, 0, 0, 0, 0))),
2, sum)
rownumber
library(perm)
rm(list = ls())
perms <- chooseMatrix(6,3)
A <- matrix(c(65,68,79.2,60,74,72.6), nrow=6, ncol=1, byrow=TRUE)
treatment_avg <- (1/3)*perms%*%A
control_avg <- (1/3)*(1-perms)%*%A
test_statistic <- abs(treatment_avg-control_avg)
rownumber <- apply(apply(perms, 1,
function(x) (x == c(1, 1, 1, 0, 0, 0))),
2, sum)
rownumber <- (rownumber == 6)
observed_test <- test_statistic[rownumber == TRUE]
#*change information here for students
larger_than_observed <- (test_statistic >= observed_test)
sum(larger_than_observed)
df <- data.frame(perms,control_avg,treatment_avg,test_statistic)
View(treatment_avg)
View(perms)
60+74+72
65+68+79
206/3
212/3
library(perm)
rm(list = ls())
perms <- chooseMatrix(6,3)
A <- matrix(c(65,68,79.2,60,74,72.6), nrow=6, ncol=1, byrow=TRUE)
treatment_avg <- (1/3)*perms%*%A
control_avg <- (1/3)*(1-perms)%*%A
test_statistic <- abs(treatment_avg-control_avg)
rownumber <- apply(apply(perms, 1,
function(x) (x == c(0, 0, 0,1,1,1))),
2, sum)
rownumber <- (rownumber == 6)
observed_test <- test_statistic[rownumber == TRUE]
#*change information here for students
larger_than_observed <- (test_statistic >= observed_test)
sum(larger_than_observed)
df <- data.frame(perms,control_avg,treatment_avg,test_statistic)
library(perm)
rm(list = ls())
perms <- chooseMatrix(6,3)
A <- matrix(c(65,68,79.2,60,74,72.6), nrow=6, ncol=1, byrow=TRUE)
treatment_avg <- (1/3)*perms%*%A
control_avg <- (1/3)*(1-perms)%*%A
test_statistic <- abs(treatment_avg-control_avg)
rownumber <- apply(apply(perms, 1,
function(x) (x == c(1, 1, 1, 0, 0, 0))),
1, sum)
rownumber <- (rownumber == 6)
observed_test <- test_statistic[rownumber == TRUE]
#*change information here for students
larger_than_observed <- (test_statistic >= observed_test)
sum(larger_than_observed)
df <- data.frame(perms,control_avg,treatment_avg,test_statistic)
library(perm)
rm(list = ls())
perms <- chooseMatrix(6,3)
A <- matrix(c(65,68,79.2,60,74,72.6), nrow=6, ncol=1, byrow=TRUE)
treatment_avg <- (1/3)*perms%*%A
control_avg <- (1/3)*(1-perms)%*%A
test_statistic <- abs(treatment_avg-control_avg)
rownumber <- apply(apply(perms, 1,
function(x) (x == c(1, 1, 1, 0, 0, 0))),
2, sum)
rownumber <- (rownumber == 6)
observed_test <- test_statistic[rownumber == TRUE]
#*change information here for students
larger_than_observed <- (test_statistic >= observed_test)
sum(larger_than_observed)
df <- data.frame(perms,control_avg,treatment_avg,test_statistic)
View(df)
phyper(50,400,800,100)
phyper(50,400,800,10)
phyper(50,400,800,100)
phyper(50,400,800,1000)
phyper(50,400,800,200)
phyper(35,400,800,200)
phyper(35,400,800,100)
phyper(35,400,800,200)
phyper(35,400,800,300)
#install.packages("rvest")
#library(rvest)
webpage <- read_html("https://www.cbinsights.com/research-unicorn-companies")
table <- html_nodes(webpage,"table")[[1]]
mytable <- html_table(table)
mytable <- html_table(table,fill=TRUE)
View(mytable)
summary(mytable)
mytable <- html_table(table, fill=TRUE, na.omit(table$node)
mytable <- html_table(table, fill=TRUE, na.omit(table$node))
TT = na.omit(mytable)
summary(TT)
View(TT)
View(mytable)
TT[country == "United States"]
TT$country == "United States"
TT[1:2]
TT[1]
TT$Country
TT[TT$country == "United States"]
QQ = TT[TT$country == "United States"]
View(QQ)
View(TT)
QQ = TT[country == "United States"]
QQ = TT[TT == "United States"]
QQ
QQ = TT[TT == "Uber"]
QQ
QQ = TT[TT == "United State"]
QQ = TT[TT == "United States"]
0.5^2+1.5^2
a
a <- c(2,1,-3,2,1)
a
b <- c(1,0,-1)
b
?convolution
?conv
216*4/(216*4+64*6)
64*6/(216*4+64*6)
A1 = 0.5
A1 <- 0.5
A2 <- 216*4/(216*4+64*6)
B1 <- 0.5
B2 <- 64*6/(216*4+64*6)
log(3)
a = 0.6
b = 0.4
A = 0.6
B = 0.4
QA1 <- 0.5
QA2 <- 216*4/(216*4+64*6)
QB1 <- 0.5
QB2 <- 64*6/(216*4+64*6)
AA = (2*QA1+3*QA2)/(4*QA1+4*QA2)
BB = (2*QB1+3*QB2)/(4*QB1+4*QB2)
setwd("G:/Dropbox (SSML)/SHARE_Programming/R/The Analytics Edge/UNIT 7/LEC_Crime")
setwd("G:/Dropbox (SSML)/SHARE_Programming/R/The Analytics Edge/UNIT 7/HW_Election Forecasting Revisited")
library(ggplot2)
library(maps)
library(ggmap)
statesMap = map_data("state")
# 1.1
str(statesMap)
table(statesMap$group)
# 1.2
ggplot(statesMap, aes(x = long, y = lat, group = group)) + geom_polygon(fill = "white", color = "black")
# 2.1
polling = read.csv("PollingImputed.csv")
table(polling$Year)
# split train set and test set
Train = subset(polling, Year < "2012")
Test = subset(polling, Year=="2012")
# glm and predict
mod2 = glm(Republican ~ SurveyUSA + DiffCount, data=Train, family="binomial")
TestPrediction = predict(mod2, newdata=Test, type="response")
# create the data frame
TestPredictionBinary = as.numeric(TestPrediction > 0.5)
# data frame with three vars, P(Y=1|x), test threahold, state
predictionDataFrame = data.frame(TestPrediction, TestPredictionBinary, Test$State)
table(predictionDataFrame$TestPredictionBinary)
22/45
mean(TestPrediction)
# trans region and merge
predictionDataFrame$region = tolower(predictionDataFrame$Test.State)
predictionMap = merge(statesMap, predictionDataFrame, by = "region")
# Reorder the data
predictionMap = predictionMap[order(predictionMap$order),]
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary)) + geom_polygon(color = "black")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
summary(predictionDataFrame$TestPrediction)
table(TestPrediction)
table(TestPrediction>0.9)
table(TestPrediction<0.1)
# 3.1 plot
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary)) + geom_polygon(color = "black")
predictionMap$Test.State
predictionDataFrame$Test.State
predictionDataFrame$[6,]
predictionDataFrame[6,]
# 3.2 plot
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", name = "Prediction 2012")
# plot 1
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black", linetype=3) + scale_fill_gradient(low = "blue", high = "red", guide = "legend", name = "Prediction 2012")
setwd("G:/Dropbox (SSML)/SHARE_Programming/R/The Analytics Edge/UNIT 7/HW_Visualizing Network Data")
# 4
?igraph.plotting
edges = read.csv("edges.csv")
users = read.csv("users.csv")
# 1.1
nrow(users)
nrow(edges)*2/nrow(users)
head(users)
head(edges)
# 1.2
table(users$school, users$locale)
# 1.3
table(users$school)
table(users$locale)
table(users$school, users$gender)
library(igraph)
g = graph.data.frame(edges, FALSE, users)
# 2.1
install.packages("igraph")
library(igraph)
g = graph.data.frame(edges, FALSE, users)
# 2.2
plot(g, vertex.size=5, vertex.label=NA)
# 2.3
sum(degree(g)>=10)
# 2.4
V(g)$size = degree(g)/2+2
plot(g, vertex.label=NA)
max(V(g)$size)
min(V(g)$size)
# 3.1
V(g)$color = "black"
V(g)$color[V(g)$gender == "A"] = "red"
V(g)$color[V(g)$gender == "B"] = "gray"
plot(g, vertex.label=NA)
# 3.2
V(g)$color = "black"
V(g)$color[V(g)$shool == "A"] = "red"
V(g)$color[V(g)$school == "AB"] = "grey"
plot(g, vertex.label=NA)
V(g)$color[V(g)$shool == "A"] = "red"
V(g)$color[V(g)$school == "AB"] = "grey"
plot(g, vertex.label=NA)
# 1.3
table(users$school)
V(g)
V(g)$color[V(g)$shool == "A"] = "red"
V(g)$color[V(g)$school == "B"] = "grey"
plot(g, vertex.label=NA)
# 3.1
V(g)$color = "black"
V(g)$color[V(g)$gender == "A"] = "red"
V(g)$color[V(g)$gender == "B"] = "gray"
plot(g, vertex.label=NA)
# 3.2
V(g)$color = "black"
V(g)$color[V(g)$shool == "A"] = "red"
V(g)$color[V(g)$school == "AB"] = "grey"
plot(g, vertex.label=NA)
# 3.2
V(g)$color = "black"
V(g)$color[V(g)$shool == "A"] = "white"
V(g)$color[V(g)$school == "AB"] = "grey"
plot(g, vertex.label=NA)
V(g)$color[V(g)$shool == "A"] = "blue"
V(g)$color[V(g)$school == "AB"] = "grey"
plot(g, vertex.label=NA)
# 3.2
V(g)$color = "black"
V(g)$color[V(g)$shool == "A"] = "blue"
V(g)$color[V(g)$school == "AB"] = "grey"
plot(g, vertex.label=NA)
# 3.2
V(g)$color = "black"
V(g)$color[V(g)$shool == "A"] = "red"
V(g)$color[V(g)$school == "AB"] = "grey"
plot(g, vertex.label=NA)
# 3.2
V(g)$color = "black"
V(g)$color[V(g)$shool == "A"] = "red"
V(g)$color[V(g)$school == "AB"] = "grey"
plot(g, vertex.label=NA)
V(g)$color = "black"
V(g)$color[V(g)$school == "A"] = "red"
V(g)$color[V(g)$school == "AB"] = "gray"
plot(g, vertex.label=NA)
# 3.2
V(g)$color = "black"
V(g)$color[V(g)$shool == "A"] = "red"
V(g)$color[V(g)$school == "AB"] = "grey"
plot(g, vertex.label=NA)
plot(g, vertex.label=NA)
plot(g, vertex.label=NA)
plot(g, vertex.label=NA)
# 3.2
V(g)$color = "black"
V(g)$color[V(g)$school == "A"] = "red"
V(g)$color[V(g)$school == "AB"] = "grey"
plot(g, vertex.label=NA)
# 3.3
V(g)$color = "black"
V(g)$color[V(g)$locale == "A"] = "red"
V(g)$color[V(g)$locale == "B"] = "grey"
plot(g, vertex.label=NA)
# 4
?igraph.plotting
setwd("G:/Dropbox (SSML)/SHARE_Programming/R/The Analytics Edge/UNIT 7/HW_Visualizing Text Data Using Word Clouds")
# 1.1 load and preprocess text
tweets = read.csv("tweets.csv", stringsAsFactors=FALSE)
library(tm)
library(SnowballC)
corpus = Corpus(VectorSource(tweets$Tweet ))
install.packages("tm")
install.packages("snowballs")
install.packages("snowballc")
install.packages("snowballC")
install.packages("SnowballC")
library(tm)
library(SnowballC)
# 1.1 load and preprocess text
tweets = read.csv("tweets.csv", stringsAsFactors=FALSE)
corpus = Corpus(VectorSource(tweets$Tweet ))
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
removedCorpus = tm_map(corpus, removeWords, stopwords("english"))
dtm = DocumentTermMatrix(removedCorpus)
allTweets = as.data.frame(as.matrix(dtm))
ncol(allTweets)
library(tm)
library(SnowballC)
corpus = Corpus(VectorSource(tweets$Tweet ))
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
removedCorpus = tm_map(corpus, removeWords, stopwords("english"))
dtm = DocumentTermMatrix(removedCorpus)
# 1.1 load and preprocess text
tweets = read.csv("tweets.csv", stringsAsFactors=FALSE)
head(tweets)
str(tweets)
View(removedCorpus)
corpus = Corpus(VectorSource(tweets$Tweet))
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, content_transformer(tolower))
corpus = vcorpus(VectorSource(tweets$Tweet))
corpus = VCorpus(VectorSource(tweets$Tweet))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
removedCorpus = tm_map(corpus, removeWords, stopwords("english"))
dtm = DocumentTermMatrix(removedCorpus)
allTweets = as.data.frame(as.matrix(dtm))
ncol(allTweets)
library(wordcloud)
# 1.2
install.packages("wordcloud")
library(wordcloud)
# 2.1
# 2.2
# 2.3
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2,0.25))
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(4,0.5))
# 2.4
removedCorpus = tm_map(corpus, removeWords, c("apple",stopwords("english")))
dtm = DocumentTermMatrix(removedCorpus)
updateTweets = as.data.frame(as.matrix(dtm))
wordcloud(colnames(updateTweets), colSums(updateTweets),scale=c(2, 0.25))
wordcloud(colnames(updateTweets), colSums(updateTweets),scale=c(6, 0.25))
wordcloud(colnames(updateTweets), colSums(updateTweets),scale=c(4, 0.5))
# 3.1
negativeTweets = subset(allTweets, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets))
negativeTweets = subset(updateTweets, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets))
# 3.2
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 5, random.order=FALSE)
# 3.2
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4)
wordcloud(colnames(negativeTweets), colSums(negativeTweets))
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 5, random.order=FALSE)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 5, random.order=FALSE)
# 3.4
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4, rot.per=0.1)
wordcloud(colnames(updateTweets), colSums(updateTweets))
wordcloud(colnames(updateTweets), colSums(updateTweets), min.freq = 5, random.order=FALSE)
# 3.5
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4,
colors=c("red", "black"), random.color=TRUE)
wordcloud(colnames(updateTweets), colSums(updateTweets), min.freq = 5, random.order=TRUE)
# 3.4
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4, rot.per=0.1)
wordcloud(colnames(updateTweets), colSums(updateTweets), min.freq = 5, random.order=TRUE)
wordcloud(colnames(updateTweets), colSums(updateTweets), min.freq = 5, random.order=TRUE)
wordcloud(colnames(updateTweets), colSums(updateTweets), min.freq = 5, random.order=FALSE)
# 3.5
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4,
colors=c("red", "black"), random.color=TRUE)
# 3.5
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4,
colors=c("red", "black"), random.color=TRUE)
# 3.5
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4,
colors=c("red", "black"), random.color=TRUE)
# 3.5
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4,
colors=c("red", "black"), random.color=TRUE)
# 3.5
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4,
colors=c("red", "black"), random.color=FALSE)
# 3.5
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4,
colors=c("red", "black"), random.color=FALSE)
# 3.5
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4,
colors=c("red", "black"), random.color=FALSE)
# 3.5
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4,
colors=c("red", "black"), random.color=TRUE)
# 3.5
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4,
colors=c("red", "black"), random.color=TRUE)
# 3.5
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4,
colors=c("red", "black"), random.color=TRUE)
# 3.4
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4, rot.per=0.1)
# 3.4
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4, rot.per=0.1)
# 3.4
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4, rot.per=0.5)
# 3.4
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4, rot.per=0.5)
# 3.4
wordcloud(colnames(negativeTweets), colSums(negativeTweets), min.freq = 4, rot.per=0.1)
# 4.1
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(2, 0.25), colors=brewer.pal(9, "Blues")[c(-1,-2,-3,-4)])
# 4.1
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(2, 0.25), colors=brewer.pal(9, "Blues")[c(-1,-2,-3,-4)])
# 4.1
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.25), colors=brewer.pal(9, "Blues")[c(-1,-2,-3,-4)])
# 4.1
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Blues")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Accent")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Set2")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Set2")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "YIOrRd")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "YlOrRd")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "YlOrRd")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Set2")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Accent")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Set2")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Accent")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Set2")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "YlOrRd")[c(-1,-2,-3,-4)])
# 3.4
wordcloud(colnames(uodateTweets), colSums(uodateTweets), min.freq = 4, rot.per=0.1)
wordcloud(colnames(uodateTweets), colSums(uodateTweets), min.freq = 4)
# 3.4
wordcloud(colnames(updateTweets), colSums(updateTweets), min.freq = 4, rot.per=0.1)
wordcloud(colnames(updateTweets), colSums(updateTweets), min.freq = 4)
wordcloud(colnames(updateTweets), colSums(updateTweets), min.freq = 4)
# 3.4
wordcloud(colnames(updateTweets), colSums(updateTweets), min.freq = 4, rot.per=0.1)
# 3.4
wordcloud(colnames(updateTweets), colSums(updateTweets), min.freq = 4, rot.per=0.5)
# 3.4
wordcloud(colnames(updateTweets), colSums(updateTweets), min.freq = 4, rot.per=0.1)
# 3.4
wordcloud(colnames(updateTweets), colSums(updateTweets), min.freq = 4, rot.per=0.9)
# 3.4
wordcloud(colnames(updateTweets), colSums(updateTweets), min.freq = 4, rot.per=0.1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Accent")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Set2")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "YlOrRd")[c(-1,-2,-3,-4)])
# 4.1
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Blues")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "gray")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "greys")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Greys")[c(-1,-2,-3,-4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Blues"))
# 4.3
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Blues")[c(-1,-2,-3,-4)])
c[-1,-2,-3,-4]
c(-1,-2,-3,-4)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Blues")[c(1,2,3,4)])
wordcloud(colnames(negativeTweets), colSums(negativeTweets), scale=c(5, 0.5), colors=brewer.pal(9, "Blues")[c(5,6,7,8)])
setwd("G:/Dropbox (SSML)/SHARE_Programming/R/The Analytics Edge/UNIT 7/HW_Visualizing Attributes of Parole Violators")
